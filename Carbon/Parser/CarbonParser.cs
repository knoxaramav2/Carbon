//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G:/Dev/Carbon/Carbon/Parser/Grammar\Carbon.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CarbonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PP_IMPORT=1, PP_DEFINE=2, CLASS=3, INTERFACE=4, PROTECT=5, PUBLIC=6, PRIVATE=7, 
		INTERNAL=8, G_ASSEMBLY=9, G_DOT=10, G_ENTRY=11, G_ELLIPSE=12, PROP_GET=13, 
		PROP_SET=14, CMP=15, CM_GTR=16, CM_LSS=17, CM_EQU=18, CM_GTR_EQU=19, CM_LSS_EQU=20, 
		UNARY_MATH=21, SET=22, AMB_MATH=23, BIN_MATH=24, A_SET=25, A_ADD=26, A_SUB=27, 
		A_MULT=28, A_DIV=29, A_EXP=30, A_MOD=31, A_SET_SUM=32, A_SET_DIFF=33, 
		A_SET_MULT=34, A_SET_QUOTIENT=35, A_INCREMENT=36, A_DECRIMENT=37, UNARY_LG_OP=38, 
		BIN_LG_OP=39, L_OR=40, L_AND=41, L_NAND=42, L_NOR=43, L_XOR=44, L_XNOR=45, 
		L_NOT=46, UNARY_BW_OP=47, BIN_BW_OP=48, BL_AND=49, BL_OR=50, BL_INV=51, 
		BL_LEFT=52, BL_RIGHT=53, CTRL_CND=54, CTRL_KW=55, C_IF=56, C_ELSE=57, 
		C_WHILE=58, C_FOR=59, C_GOTO=60, C_BREAK=61, C_CONT=62, C_IN=63, L_BRACKET=64, 
		R_BRACKET=65, L_PARANTH=66, R_PARANTH=67, L_BRACE=68, R_BRACE=69, LINE_COMMENT=70, 
		BLOCK_COMMENT=71, BOOL_VAL=72, REF_VAL=73, VALUE=74, THIS=75, TRUE=76, 
		FALSE=77, RETURN=78, PRIMITIVE=79, NUMBER=80, STRING=81, CHAR=82, COMMA=83, 
		INTEGER=84, DECIMAL=85, IDENTIFIER=86, SEMI=87, WS=88;
	public const int
		RULE_carbon = 0, RULE_symbol_id = 1, RULE_preproc = 2, RULE_pp_import = 3, 
		RULE_pp_define = 4, RULE_statement = 5, RULE_expr = 6, RULE_classExpr = 7, 
		RULE_interfaceExpr = 8, RULE_inheritListExpr = 9, RULE_procCallExpr = 10, 
		RULE_bodyExpr = 11, RULE_groupExpr = 12, RULE_fncGroupExpr = 13, RULE_forGroupExpr = 14, 
		RULE_whileGroupExpr = 15, RULE_indexExpr = 16, RULE_gotoExpr = 17, RULE_varDeclExpr = 18, 
		RULE_propDefExpr = 19, RULE_propGetExpr = 20, RULE_propSetExpr = 21, RULE_fncDeclExpr = 22, 
		RULE_ctrlCndExpr = 23, RULE_ctrlWhileExpr = 24, RULE_ctrlForExpr = 25, 
		RULE_setExpr = 26, RULE_mathUnExpr = 27, RULE_mathBinExpr = 28, RULE_compValExpr = 29, 
		RULE_logicBinExpr = 30, RULE_logicUnExpr = 31, RULE_valueExpr = 32, RULE_mathUnLeftExpr = 33, 
		RULE_mathUnRightExpr = 34, RULE_boolValsExpr = 35, RULE_ctrlKwExpr = 36;
	public static readonly string[] ruleNames = {
		"carbon", "symbol_id", "preproc", "pp_import", "pp_define", "statement", 
		"expr", "classExpr", "interfaceExpr", "inheritListExpr", "procCallExpr", 
		"bodyExpr", "groupExpr", "fncGroupExpr", "forGroupExpr", "whileGroupExpr", 
		"indexExpr", "gotoExpr", "varDeclExpr", "propDefExpr", "propGetExpr", 
		"propSetExpr", "fncDeclExpr", "ctrlCndExpr", "ctrlWhileExpr", "ctrlForExpr", 
		"setExpr", "mathUnExpr", "mathBinExpr", "compValExpr", "logicBinExpr", 
		"logicUnExpr", "valueExpr", "mathUnLeftExpr", "mathUnRightExpr", "boolValsExpr", 
		"ctrlKwExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'define'", "'class'", "'interface'", null, "'public'", 
		"'private'", "'internal'", "'__asm__'", "'.'", "'entry'", "'...'", "'get'", 
		"'set'", null, "'>'", "'<'", "'=='", "'>='", "'<='", null, null, null, 
		null, "'='", "'+'", "'-'", "'*'", "'/'", "'**'", "'%'", "'+='", "'-='", 
		"'*='", "'/='", "'++'", "'--'", null, null, "'||'", "'&&'", "'!&'", "'!|'", 
		"'^|'", "'^!|'", "'!'", null, null, "'&'", "'|'", "'~'", "'<<'", "'>>'", 
		null, null, "'if'", "'else'", "'while'", "'for'", "'goto'", "'break'", 
		"'continue'", "'in'", "'['", "']'", "'('", "')'", "'{'", "'}'", null, 
		null, null, null, "'value'", "'this'", "'true'", "'false'", "'return'", 
		null, null, null, null, "','", null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PP_IMPORT", "PP_DEFINE", "CLASS", "INTERFACE", "PROTECT", "PUBLIC", 
		"PRIVATE", "INTERNAL", "G_ASSEMBLY", "G_DOT", "G_ENTRY", "G_ELLIPSE", 
		"PROP_GET", "PROP_SET", "CMP", "CM_GTR", "CM_LSS", "CM_EQU", "CM_GTR_EQU", 
		"CM_LSS_EQU", "UNARY_MATH", "SET", "AMB_MATH", "BIN_MATH", "A_SET", "A_ADD", 
		"A_SUB", "A_MULT", "A_DIV", "A_EXP", "A_MOD", "A_SET_SUM", "A_SET_DIFF", 
		"A_SET_MULT", "A_SET_QUOTIENT", "A_INCREMENT", "A_DECRIMENT", "UNARY_LG_OP", 
		"BIN_LG_OP", "L_OR", "L_AND", "L_NAND", "L_NOR", "L_XOR", "L_XNOR", "L_NOT", 
		"UNARY_BW_OP", "BIN_BW_OP", "BL_AND", "BL_OR", "BL_INV", "BL_LEFT", "BL_RIGHT", 
		"CTRL_CND", "CTRL_KW", "C_IF", "C_ELSE", "C_WHILE", "C_FOR", "C_GOTO", 
		"C_BREAK", "C_CONT", "C_IN", "L_BRACKET", "R_BRACKET", "L_PARANTH", "R_PARANTH", 
		"L_BRACE", "R_BRACE", "LINE_COMMENT", "BLOCK_COMMENT", "BOOL_VAL", "REF_VAL", 
		"VALUE", "THIS", "TRUE", "FALSE", "RETURN", "PRIMITIVE", "NUMBER", "STRING", 
		"CHAR", "COMMA", "INTEGER", "DECIMAL", "IDENTIFIER", "SEMI", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Carbon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CarbonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CarbonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CarbonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CarbonContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CarbonParser.Eof, 0); }
		public PreprocContext[] preproc() {
			return GetRuleContexts<PreprocContext>();
		}
		public PreprocContext preproc(int i) {
			return GetRuleContext<PreprocContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CarbonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carbon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterCarbon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitCarbon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarbon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarbonContext carbon() {
		CarbonContext _localctx = new CarbonContext(Context, State);
		EnterRule(_localctx, 0, RULE_carbon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PP_IMPORT:
				case PP_DEFINE:
					{
					State = 74; preproc();
					}
					break;
				case CLASS:
				case INTERFACE:
				case PROTECT:
				case UNARY_MATH:
				case AMB_MATH:
				case UNARY_LG_OP:
				case CTRL_CND:
				case CTRL_KW:
				case C_WHILE:
				case C_FOR:
				case C_GOTO:
				case L_BRACKET:
				case L_PARANTH:
				case L_BRACE:
				case BOOL_VAL:
				case REF_VAL:
				case PRIMITIVE:
				case IDENTIFIER:
					{
					State = 75; statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IMPORT) | (1L << PP_DEFINE) | (1L << CLASS) | (1L << INTERFACE) | (1L << PROTECT) | (1L << UNARY_MATH) | (1L << AMB_MATH) | (1L << UNARY_LG_OP) | (1L << CTRL_CND) | (1L << CTRL_KW) | (1L << C_WHILE) | (1L << C_FOR) | (1L << C_GOTO))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_BRACKET - 64)) | (1L << (L_PARANTH - 64)) | (1L << (L_BRACE - 64)) | (1L << (BOOL_VAL - 64)) | (1L << (REF_VAL - 64)) | (1L << (PRIMITIVE - 64)) | (1L << (IDENTIFIER - 64)))) != 0) );
			State = 82; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_idContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CarbonParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CarbonParser.IDENTIFIER, i);
		}
		public ITerminalNode[] G_DOT() { return GetTokens(CarbonParser.G_DOT); }
		public ITerminalNode G_DOT(int i) {
			return GetToken(CarbonParser.G_DOT, i);
		}
		public Symbol_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterSymbol_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitSymbol_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_idContext symbol_id() {
		Symbol_idContext _localctx = new Symbol_idContext(Context, State);
		EnterRule(_localctx, 2, RULE_symbol_id);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(IDENTIFIER);
			State = 89;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 85; Match(G_DOT);
					State = 86; Match(IDENTIFIER);
					}
					} 
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(CarbonParser.SEMI, 0); }
		public Pp_importContext[] pp_import() {
			return GetRuleContexts<Pp_importContext>();
		}
		public Pp_importContext pp_import(int i) {
			return GetRuleContext<Pp_importContext>(i);
		}
		public Pp_defineContext[] pp_define() {
			return GetRuleContexts<Pp_defineContext>();
		}
		public Pp_defineContext pp_define(int i) {
			return GetRuleContext<Pp_defineContext>(i);
		}
		public PreprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterPreproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitPreproc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreproc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocContext preproc() {
		PreprocContext _localctx = new PreprocContext(Context, State);
		EnterRule(_localctx, 4, RULE_preproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 94;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PP_IMPORT:
					{
					State = 92; pp_import();
					}
					break;
				case PP_DEFINE:
					{
					State = 93; pp_define();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PP_IMPORT || _la==PP_DEFINE );
			State = 98; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pp_importContext : ParserRuleContext {
		public ITerminalNode PP_IMPORT() { return GetToken(CarbonParser.PP_IMPORT, 0); }
		public Symbol_idContext[] symbol_id() {
			return GetRuleContexts<Symbol_idContext>();
		}
		public Symbol_idContext symbol_id(int i) {
			return GetRuleContext<Symbol_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CarbonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CarbonParser.COMMA, i);
		}
		public Pp_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pp_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterPp_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitPp_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPp_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pp_importContext pp_import() {
		Pp_importContext _localctx = new Pp_importContext(Context, State);
		EnterRule(_localctx, 6, RULE_pp_import);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(PP_IMPORT);
			State = 101; symbol_id();
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 102; Match(COMMA);
					State = 103; symbol_id();
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pp_defineContext : ParserRuleContext {
		public ITerminalNode PP_DEFINE() { return GetToken(CarbonParser.PP_DEFINE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CarbonParser.IDENTIFIER, 0); }
		public ITerminalNode PRIMITIVE() { return GetToken(CarbonParser.PRIMITIVE, 0); }
		public Pp_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pp_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterPp_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitPp_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPp_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pp_defineContext pp_define() {
		Pp_defineContext _localctx = new Pp_defineContext(Context, State);
		EnterRule(_localctx, 8, RULE_pp_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(PP_DEFINE);
			State = 110; Match(IDENTIFIER);
			State = 111; Match(PRIMITIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ClassExprContext classExpr() {
			return GetRuleContext<ClassExprContext>(0);
		}
		public InterfaceExprContext interfaceExpr() {
			return GetRuleContext<InterfaceExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(CarbonParser.SEMI, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROTECT:
			case UNARY_MATH:
			case AMB_MATH:
			case UNARY_LG_OP:
			case CTRL_CND:
			case CTRL_KW:
			case C_WHILE:
			case C_FOR:
			case C_GOTO:
			case L_BRACKET:
			case L_PARANTH:
			case L_BRACE:
			case BOOL_VAL:
			case REF_VAL:
			case PRIMITIVE:
			case IDENTIFIER:
				{
				State = 114;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 113; expr();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 116;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 118; Match(SEMI);
					}
				}

				}
				break;
			case CLASS:
				{
				State = 121; classExpr();
				}
				break;
			case INTERFACE:
				{
				State = 122; interfaceExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public GroupExprContext groupExpr() {
			return GetRuleContext<GroupExprContext>(0);
		}
		public IndexExprContext indexExpr() {
			return GetRuleContext<IndexExprContext>(0);
		}
		public FncDeclExprContext fncDeclExpr() {
			return GetRuleContext<FncDeclExprContext>(0);
		}
		public VarDeclExprContext varDeclExpr() {
			return GetRuleContext<VarDeclExprContext>(0);
		}
		public ProcCallExprContext procCallExpr() {
			return GetRuleContext<ProcCallExprContext>(0);
		}
		public CtrlCndExprContext ctrlCndExpr() {
			return GetRuleContext<CtrlCndExprContext>(0);
		}
		public CtrlForExprContext ctrlForExpr() {
			return GetRuleContext<CtrlForExprContext>(0);
		}
		public CtrlWhileExprContext ctrlWhileExpr() {
			return GetRuleContext<CtrlWhileExprContext>(0);
		}
		public SetExprContext setExpr() {
			return GetRuleContext<SetExprContext>(0);
		}
		public MathUnExprContext mathUnExpr() {
			return GetRuleContext<MathUnExprContext>(0);
		}
		public MathBinExprContext mathBinExpr() {
			return GetRuleContext<MathBinExprContext>(0);
		}
		public CompValExprContext compValExpr() {
			return GetRuleContext<CompValExprContext>(0);
		}
		public LogicBinExprContext logicBinExpr() {
			return GetRuleContext<LogicBinExprContext>(0);
		}
		public LogicUnExprContext logicUnExpr() {
			return GetRuleContext<LogicUnExprContext>(0);
		}
		public CtrlKwExprContext ctrlKwExpr() {
			return GetRuleContext<CtrlKwExprContext>(0);
		}
		public GotoExprContext gotoExpr() {
			return GetRuleContext<GotoExprContext>(0);
		}
		public ValueExprContext valueExpr() {
			return GetRuleContext<ValueExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 125; bodyExpr();
				}
				break;
			case 2:
				{
				State = 126; groupExpr();
				}
				break;
			case 3:
				{
				State = 127; indexExpr();
				}
				break;
			case 4:
				{
				State = 128; fncDeclExpr();
				}
				break;
			case 5:
				{
				State = 129; varDeclExpr();
				}
				break;
			case 6:
				{
				State = 130; procCallExpr();
				}
				break;
			case 7:
				{
				State = 131; ctrlCndExpr();
				}
				break;
			case 8:
				{
				State = 132; ctrlForExpr();
				}
				break;
			case 9:
				{
				State = 133; ctrlWhileExpr();
				}
				break;
			case 10:
				{
				State = 134; setExpr();
				}
				break;
			case 11:
				{
				State = 135; mathUnExpr();
				}
				break;
			case 12:
				{
				State = 136; mathBinExpr();
				}
				break;
			case 13:
				{
				State = 137; compValExpr();
				}
				break;
			case 14:
				{
				State = 138; logicBinExpr();
				}
				break;
			case 15:
				{
				State = 139; logicUnExpr();
				}
				break;
			case 16:
				{
				State = 140; ctrlKwExpr();
				}
				break;
			case 17:
				{
				State = 141; gotoExpr();
				}
				break;
			case 18:
				{
				State = 142; valueExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExprContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CarbonParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CarbonParser.IDENTIFIER, 0); }
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public InheritListExprContext inheritListExpr() {
			return GetRuleContext<InheritListExprContext>(0);
		}
		public ClassExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterClassExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitClassExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExprContext classExpr() {
		ClassExprContext _localctx = new ClassExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_classExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(CLASS);
			State = 146; Match(IDENTIFIER);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_PARANTH) {
				{
				State = 147; inheritListExpr();
				}
			}

			State = 150; bodyExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceExprContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CarbonParser.INTERFACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CarbonParser.IDENTIFIER, 0); }
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public InterfaceExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterInterfaceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitInterfaceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceExprContext interfaceExpr() {
		InterfaceExprContext _localctx = new InterfaceExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_interfaceExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(INTERFACE);
			State = 153; Match(IDENTIFIER);
			State = 154; bodyExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritListExprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(CarbonParser.L_PARANTH, 0); }
		public Symbol_idContext[] symbol_id() {
			return GetRuleContexts<Symbol_idContext>();
		}
		public Symbol_idContext symbol_id(int i) {
			return GetRuleContext<Symbol_idContext>(i);
		}
		public ITerminalNode R_PARANTH() { return GetToken(CarbonParser.R_PARANTH, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CarbonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CarbonParser.COMMA, i);
		}
		public InheritListExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritListExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterInheritListExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitInheritListExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritListExprContext inheritListExpr() {
		InheritListExprContext _localctx = new InheritListExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_inheritListExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 156; Match(L_PARANTH);
			State = 157; symbol_id();
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 158; Match(COMMA);
					State = 159; symbol_id();
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 165; Match(R_PARANTH);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcCallExprContext : ParserRuleContext {
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public GroupExprContext groupExpr() {
			return GetRuleContext<GroupExprContext>(0);
		}
		public ProcCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procCallExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterProcCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitProcCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcCallExprContext procCallExpr() {
		ProcCallExprContext _localctx = new ProcCallExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_procCallExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; symbol_id();
			State = 168; groupExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyExprContext : ParserRuleContext {
		public ITerminalNode L_BRACE() { return GetToken(CarbonParser.L_BRACE, 0); }
		public ITerminalNode R_BRACE() { return GetToken(CarbonParser.R_BRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodyExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterBodyExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitBodyExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyExprContext bodyExpr() {
		BodyExprContext _localctx = new BodyExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_bodyExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(L_BRACE);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 171; statement();
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 177; Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupExprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(CarbonParser.L_PARANTH, 0); }
		public ITerminalNode R_PARANTH() { return GetToken(CarbonParser.R_PARANTH, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterGroupExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitGroupExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupExprContext groupExpr() {
		GroupExprContext _localctx = new GroupExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_groupExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 179; Match(L_PARANTH);
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROTECT:
			case UNARY_MATH:
			case AMB_MATH:
			case UNARY_LG_OP:
			case CTRL_CND:
			case CTRL_KW:
			case C_WHILE:
			case C_FOR:
			case C_GOTO:
			case L_BRACKET:
			case L_PARANTH:
			case L_BRACE:
			case BOOL_VAL:
			case REF_VAL:
			case PRIMITIVE:
			case IDENTIFIER:
				{
				State = 180; expr();
				}
				break;
			case R_PARANTH:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 184; Match(R_PARANTH);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FncGroupExprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(CarbonParser.L_PARANTH, 0); }
		public ITerminalNode R_PARANTH() { return GetToken(CarbonParser.R_PARANTH, 0); }
		public VarDeclExprContext[] varDeclExpr() {
			return GetRuleContexts<VarDeclExprContext>();
		}
		public VarDeclExprContext varDeclExpr(int i) {
			return GetRuleContext<VarDeclExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CarbonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CarbonParser.COMMA, i);
		}
		public FncGroupExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fncGroupExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterFncGroupExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitFncGroupExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFncGroupExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FncGroupExprContext fncGroupExpr() {
		FncGroupExprContext _localctx = new FncGroupExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_fncGroupExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(L_PARANTH);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTECT || _la==IDENTIFIER) {
				{
				State = 187; varDeclExpr();
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 188; Match(COMMA);
						State = 189; varDeclExpr();
						}
						} 
					}
					State = 194;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				}
			}

			State = 197; Match(R_PARANTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForGroupExprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(CarbonParser.L_PARANTH, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(CarbonParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(CarbonParser.SEMI, i);
		}
		public ITerminalNode R_PARANTH() { return GetToken(CarbonParser.R_PARANTH, 0); }
		public VarDeclExprContext varDeclExpr() {
			return GetRuleContext<VarDeclExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForGroupExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forGroupExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterForGroupExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitForGroupExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForGroupExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForGroupExprContext forGroupExpr() {
		ForGroupExprContext _localctx = new ForGroupExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_forGroupExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(L_PARANTH);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTECT || _la==IDENTIFIER) {
				{
				State = 200; varDeclExpr();
				}
			}

			State = 203; Match(SEMI);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECT) | (1L << UNARY_MATH) | (1L << AMB_MATH) | (1L << UNARY_LG_OP) | (1L << CTRL_CND) | (1L << CTRL_KW) | (1L << C_WHILE) | (1L << C_FOR) | (1L << C_GOTO))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_BRACKET - 64)) | (1L << (L_PARANTH - 64)) | (1L << (L_BRACE - 64)) | (1L << (BOOL_VAL - 64)) | (1L << (REF_VAL - 64)) | (1L << (PRIMITIVE - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 204; expr();
				}
			}

			State = 207; Match(SEMI);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECT) | (1L << UNARY_MATH) | (1L << AMB_MATH) | (1L << UNARY_LG_OP) | (1L << CTRL_CND) | (1L << CTRL_KW) | (1L << C_WHILE) | (1L << C_FOR) | (1L << C_GOTO))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_BRACKET - 64)) | (1L << (L_PARANTH - 64)) | (1L << (L_BRACE - 64)) | (1L << (BOOL_VAL - 64)) | (1L << (REF_VAL - 64)) | (1L << (PRIMITIVE - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 208; expr();
				}
			}

			State = 211; Match(R_PARANTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileGroupExprContext : ParserRuleContext {
		public ITerminalNode L_PARANTH() { return GetToken(CarbonParser.L_PARANTH, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode R_PARANTH() { return GetToken(CarbonParser.R_PARANTH, 0); }
		public WhileGroupExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileGroupExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterWhileGroupExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitWhileGroupExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileGroupExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileGroupExprContext whileGroupExpr() {
		WhileGroupExprContext _localctx = new WhileGroupExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_whileGroupExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(L_PARANTH);
			State = 214; expr();
			State = 215; Match(R_PARANTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExprContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(CarbonParser.L_BRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode R_BRACKET() { return GetToken(CarbonParser.R_BRACKET, 0); }
		public IndexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExprContext indexExpr() {
		IndexExprContext _localctx = new IndexExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_indexExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(L_BRACKET);
			State = 218; expr();
			State = 219; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoExprContext : ParserRuleContext {
		public ITerminalNode C_GOTO() { return GetToken(CarbonParser.C_GOTO, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CarbonParser.IDENTIFIER, 0); }
		public GotoExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterGotoExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitGotoExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoExprContext gotoExpr() {
		GotoExprContext _localctx = new GotoExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_gotoExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(C_GOTO);
			State = 222; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclExprContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CarbonParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CarbonParser.IDENTIFIER, i);
		}
		public ITerminalNode PROTECT() { return GetToken(CarbonParser.PROTECT, 0); }
		public PropDefExprContext propDefExpr() {
			return GetRuleContext<PropDefExprContext>(0);
		}
		public ITerminalNode SET() { return GetToken(CarbonParser.SET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterVarDeclExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitVarDeclExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclExprContext varDeclExpr() {
		VarDeclExprContext _localctx = new VarDeclExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_varDeclExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTECT) {
				{
				State = 224; Match(PROTECT);
				}
			}

			State = 227; Match(IDENTIFIER);
			State = 228; Match(IDENTIFIER);
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 229; propDefExpr();
				}
				break;
			}
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 232; Match(SET);
				State = 233; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropDefExprContext : ParserRuleContext {
		public ITerminalNode L_BRACE() { return GetToken(CarbonParser.L_BRACE, 0); }
		public ITerminalNode R_BRACE() { return GetToken(CarbonParser.R_BRACE, 0); }
		public PropSetExprContext[] propSetExpr() {
			return GetRuleContexts<PropSetExprContext>();
		}
		public PropSetExprContext propSetExpr(int i) {
			return GetRuleContext<PropSetExprContext>(i);
		}
		public PropGetExprContext[] propGetExpr() {
			return GetRuleContexts<PropGetExprContext>();
		}
		public PropGetExprContext propGetExpr(int i) {
			return GetRuleContext<PropGetExprContext>(i);
		}
		public PropDefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propDefExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterPropDefExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitPropDefExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropDefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropDefExprContext propDefExpr() {
		PropDefExprContext _localctx = new PropDefExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_propDefExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(L_BRACE);
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					State = 239;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PROP_SET:
						{
						State = 237; propSetExpr();
						}
						break;
					case PROP_GET:
						{
						State = 238; propGetExpr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 244; Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropGetExprContext : ParserRuleContext {
		public ITerminalNode PROP_GET() { return GetToken(CarbonParser.PROP_GET, 0); }
		public ITerminalNode L_BRACE() { return GetToken(CarbonParser.L_BRACE, 0); }
		public ITerminalNode RETURN() { return GetToken(CarbonParser.RETURN, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(CarbonParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(CarbonParser.SEMI, i);
		}
		public ITerminalNode R_BRACE() { return GetToken(CarbonParser.R_BRACE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PropGetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propGetExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterPropGetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitPropGetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropGetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropGetExprContext propGetExpr() {
		PropGetExprContext _localctx = new PropGetExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_propGetExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(PROP_GET);
			State = 247; Match(L_BRACE);
			State = 253;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 248; expr();
					State = 249; Match(SEMI);
					}
					} 
				}
				State = 255;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 256; Match(RETURN);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROTECT) | (1L << UNARY_MATH) | (1L << AMB_MATH) | (1L << UNARY_LG_OP) | (1L << CTRL_CND) | (1L << CTRL_KW) | (1L << C_WHILE) | (1L << C_FOR) | (1L << C_GOTO))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_BRACKET - 64)) | (1L << (L_PARANTH - 64)) | (1L << (L_BRACE - 64)) | (1L << (BOOL_VAL - 64)) | (1L << (REF_VAL - 64)) | (1L << (PRIMITIVE - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 257; expr();
				}
			}

			State = 260; Match(SEMI);
			State = 261; Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropSetExprContext : ParserRuleContext {
		public ITerminalNode PROP_SET() { return GetToken(CarbonParser.PROP_SET, 0); }
		public ITerminalNode L_BRACE() { return GetToken(CarbonParser.L_BRACE, 0); }
		public ITerminalNode REF_VAL() { return GetToken(CarbonParser.REF_VAL, 0); }
		public ITerminalNode SET() { return GetToken(CarbonParser.SET, 0); }
		public ITerminalNode SEMI() { return GetToken(CarbonParser.SEMI, 0); }
		public ITerminalNode R_BRACE() { return GetToken(CarbonParser.R_BRACE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PropSetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propSetExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterPropSetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitPropSetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropSetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropSetExprContext propSetExpr() {
		PropSetExprContext _localctx = new PropSetExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_propSetExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(PROP_SET);
			State = 264; Match(L_BRACE);
			State = 265; Match(REF_VAL);
			State = 266; Match(SET);
			{
			State = 267; expr();
			}
			State = 268; Match(SEMI);
			State = 269; Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FncDeclExprContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CarbonParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CarbonParser.IDENTIFIER, i);
		}
		public FncGroupExprContext fncGroupExpr() {
			return GetRuleContext<FncGroupExprContext>(0);
		}
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public ITerminalNode PROTECT() { return GetToken(CarbonParser.PROTECT, 0); }
		public FncDeclExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fncDeclExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterFncDeclExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitFncDeclExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFncDeclExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FncDeclExprContext fncDeclExpr() {
		FncDeclExprContext _localctx = new FncDeclExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_fncDeclExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROTECT) {
				{
				State = 271; Match(PROTECT);
				}
			}

			State = 274; Match(IDENTIFIER);
			State = 275; Match(IDENTIFIER);
			State = 276; fncGroupExpr();
			State = 277; bodyExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlCndExprContext : ParserRuleContext {
		public ITerminalNode CTRL_CND() { return GetToken(CarbonParser.CTRL_CND, 0); }
		public GroupExprContext groupExpr() {
			return GetRuleContext<GroupExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public CtrlCndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlCndExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterCtrlCndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitCtrlCndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlCndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlCndExprContext ctrlCndExpr() {
		CtrlCndExprContext _localctx = new CtrlCndExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_ctrlCndExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(CTRL_CND);
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 280; groupExpr();
				}
				break;
			case 2:
				{
				State = 281; expr();
				}
				break;
			}
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 284; bodyExpr();
				}
				break;
			case 2:
				{
				State = 285; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlWhileExprContext : ParserRuleContext {
		public ITerminalNode C_WHILE() { return GetToken(CarbonParser.C_WHILE, 0); }
		public WhileGroupExprContext whileGroupExpr() {
			return GetRuleContext<WhileGroupExprContext>(0);
		}
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CtrlWhileExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlWhileExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterCtrlWhileExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitCtrlWhileExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlWhileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlWhileExprContext ctrlWhileExpr() {
		CtrlWhileExprContext _localctx = new CtrlWhileExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_ctrlWhileExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(C_WHILE);
			State = 289; whileGroupExpr();
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 290; bodyExpr();
				}
				break;
			case 2:
				{
				State = 291; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlForExprContext : ParserRuleContext {
		public ITerminalNode C_FOR() { return GetToken(CarbonParser.C_FOR, 0); }
		public ForGroupExprContext forGroupExpr() {
			return GetRuleContext<ForGroupExprContext>(0);
		}
		public BodyExprContext bodyExpr() {
			return GetRuleContext<BodyExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CtrlForExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlForExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterCtrlForExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitCtrlForExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlForExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlForExprContext ctrlForExpr() {
		CtrlForExprContext _localctx = new CtrlForExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_ctrlForExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(C_FOR);
			State = 295; forGroupExpr();
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 296; bodyExpr();
				}
				break;
			case 2:
				{
				State = 297; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExprContext : ParserRuleContext {
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public ITerminalNode SET() { return GetToken(CarbonParser.SET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterSetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitSetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExprContext setExpr() {
		SetExprContext _localctx = new SetExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_setExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; symbol_id();
			State = 301; Match(SET);
			State = 302; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathUnExprContext : ParserRuleContext {
		public MathUnLeftExprContext mathUnLeftExpr() {
			return GetRuleContext<MathUnLeftExprContext>(0);
		}
		public MathUnRightExprContext mathUnRightExpr() {
			return GetRuleContext<MathUnRightExprContext>(0);
		}
		public MathUnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathUnExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterMathUnExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitMathUnExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathUnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathUnExprContext mathUnExpr() {
		MathUnExprContext _localctx = new MathUnExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_mathUnExpr);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNARY_MATH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; mathUnLeftExpr();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; mathUnRightExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathBinExprContext : ParserRuleContext {
		public ValueExprContext[] valueExpr() {
			return GetRuleContexts<ValueExprContext>();
		}
		public ValueExprContext valueExpr(int i) {
			return GetRuleContext<ValueExprContext>(i);
		}
		public ITerminalNode BIN_MATH() { return GetToken(CarbonParser.BIN_MATH, 0); }
		public ITerminalNode AMB_MATH() { return GetToken(CarbonParser.AMB_MATH, 0); }
		public MathBinExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathBinExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterMathBinExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitMathBinExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathBinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathBinExprContext mathBinExpr() {
		MathBinExprContext _localctx = new MathBinExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_mathBinExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; valueExpr();
			State = 309;
			_la = TokenStream.LA(1);
			if ( !(_la==AMB_MATH || _la==BIN_MATH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 310; valueExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompValExprContext : ParserRuleContext {
		public ValueExprContext[] valueExpr() {
			return GetRuleContexts<ValueExprContext>();
		}
		public ValueExprContext valueExpr(int i) {
			return GetRuleContext<ValueExprContext>(i);
		}
		public ITerminalNode CMP() { return GetToken(CarbonParser.CMP, 0); }
		public CompValExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compValExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterCompValExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitCompValExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompValExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompValExprContext compValExpr() {
		CompValExprContext _localctx = new CompValExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_compValExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; valueExpr();
			State = 313; Match(CMP);
			State = 314; valueExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicBinExprContext : ParserRuleContext {
		public ValueExprContext[] valueExpr() {
			return GetRuleContexts<ValueExprContext>();
		}
		public ValueExprContext valueExpr(int i) {
			return GetRuleContext<ValueExprContext>(i);
		}
		public ITerminalNode BIN_LG_OP() { return GetToken(CarbonParser.BIN_LG_OP, 0); }
		public LogicBinExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicBinExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterLogicBinExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitLogicBinExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicBinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicBinExprContext logicBinExpr() {
		LogicBinExprContext _localctx = new LogicBinExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_logicBinExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; valueExpr();
			State = 317; Match(BIN_LG_OP);
			State = 318; valueExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicUnExprContext : ParserRuleContext {
		public ITerminalNode UNARY_LG_OP() { return GetToken(CarbonParser.UNARY_LG_OP, 0); }
		public ValueExprContext valueExpr() {
			return GetRuleContext<ValueExprContext>(0);
		}
		public LogicUnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicUnExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterLogicUnExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitLogicUnExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicUnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicUnExprContext logicUnExpr() {
		LogicUnExprContext _localctx = new LogicUnExprContext(Context, State);
		EnterRule(_localctx, 62, RULE_logicUnExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(UNARY_LG_OP);
			State = 321; valueExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueExprContext : ParserRuleContext {
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public BoolValsExprContext boolValsExpr() {
			return GetRuleContext<BoolValsExprContext>(0);
		}
		public ITerminalNode PRIMITIVE() { return GetToken(CarbonParser.PRIMITIVE, 0); }
		public ITerminalNode REF_VAL() { return GetToken(CarbonParser.REF_VAL, 0); }
		public GroupExprContext groupExpr() {
			return GetRuleContext<GroupExprContext>(0);
		}
		public ITerminalNode AMB_MATH() { return GetToken(CarbonParser.AMB_MATH, 0); }
		public ValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterValueExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitValueExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueExprContext valueExpr() {
		ValueExprContext _localctx = new ValueExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_valueExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AMB_MATH) {
				{
				State = 323; Match(AMB_MATH);
				}
			}

			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 326; symbol_id();
				}
				break;
			case BOOL_VAL:
				{
				State = 327; boolValsExpr();
				}
				break;
			case PRIMITIVE:
				{
				State = 328; Match(PRIMITIVE);
				}
				break;
			case REF_VAL:
				{
				State = 329; Match(REF_VAL);
				}
				break;
			case L_PARANTH:
				{
				State = 330; groupExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathUnLeftExprContext : ParserRuleContext {
		public ITerminalNode UNARY_MATH() { return GetToken(CarbonParser.UNARY_MATH, 0); }
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public MathUnLeftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathUnLeftExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterMathUnLeftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitMathUnLeftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathUnLeftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathUnLeftExprContext mathUnLeftExpr() {
		MathUnLeftExprContext _localctx = new MathUnLeftExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_mathUnLeftExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 333; Match(UNARY_MATH);
			State = 334; symbol_id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathUnRightExprContext : ParserRuleContext {
		public Symbol_idContext symbol_id() {
			return GetRuleContext<Symbol_idContext>(0);
		}
		public ITerminalNode UNARY_MATH() { return GetToken(CarbonParser.UNARY_MATH, 0); }
		public MathUnRightExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathUnRightExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterMathUnRightExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitMathUnRightExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathUnRightExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathUnRightExprContext mathUnRightExpr() {
		MathUnRightExprContext _localctx = new MathUnRightExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_mathUnRightExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 336; symbol_id();
			State = 337; Match(UNARY_MATH);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolValsExprContext : ParserRuleContext {
		public ITerminalNode BOOL_VAL() { return GetToken(CarbonParser.BOOL_VAL, 0); }
		public BoolValsExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolValsExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterBoolValsExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitBoolValsExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolValsExprContext boolValsExpr() {
		BoolValsExprContext _localctx = new BoolValsExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_boolValsExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(BOOL_VAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlKwExprContext : ParserRuleContext {
		public ITerminalNode CTRL_KW() { return GetToken(CarbonParser.CTRL_KW, 0); }
		public CtrlKwExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlKwExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.EnterCtrlKwExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICarbonListener typedListener = listener as ICarbonListener;
			if (typedListener != null) typedListener.ExitCtrlKwExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarbonVisitor<TResult> typedVisitor = visitor as ICarbonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlKwExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlKwExprContext ctrlKwExpr() {
		CtrlKwExprContext _localctx = new CtrlKwExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_ctrlKwExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(CTRL_KW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Z', '\x15A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'O', '\n', '\x2', 
		'\x6', '\x2', 'Q', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'R', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'Z', '\n', '\x3', '\f', '\x3', '\xE', '\x3', ']', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x6', '\x4', '\x61', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '\x62', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'k', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'n', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x6', '\a', 'u', '\n', '\a', '\r', '\a', '\xE', 
		'\a', 'v', '\x3', '\a', '\x5', '\a', 'z', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x92', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x97', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\xA3', '\n', '\v', '\f', '\v', '\xE', '\v', '\xA6', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xAF', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xB2', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB9', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xC1', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC4', 
		'\v', '\xF', '\x5', '\xF', '\xC6', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xCC', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xD0', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xD4', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x5', '\x14', '\xE4', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xE9', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xED', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xF2', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\xF5', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\xFE', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x101', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x105', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x5', '\x18', '\x113', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x11D', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x121', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x127', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x12D', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x135', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x5', '\"', '\x147', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x14E', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\t', '[', 'l', '\xA4', '\xB0', '\xC2', '\xF3', '\xFF', '\x2', '\'', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', '\x2', '\x3', '\x3', '\x2', '\x19', 
		'\x1A', '\x2', '\x16A', '\x2', 'P', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x6', '`', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x66', '\x3', '\x2', '\x2', '\x2', '\n', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\f', '}', '\x3', '\x2', '\x2', '\x2', '\xE', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x93', '\x3', '\x2', '\x2', '\x2', '\x12', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xD7', '\x3', '\x2', '\x2', '\x2', '\"', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xDF', '\x3', '\x2', '\x2', '\x2', '&', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xEE', '\x3', '\x2', '\x2', '\x2', '*', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x109', '\x3', '\x2', '\x2', '\x2', '.', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x122', '\x3', '\x2', '\x2', '\x2', '\x34', '\x128', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x38', '\x134', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x13A', '\x3', '\x2', '\x2', '\x2', '>', '\x13E', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x142', '\x3', '\x2', '\x2', '\x2', '\x42', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x152', '\x3', '\x2', '\x2', '\x2', 'H', '\x155', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x157', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x5', 
		'\x6', '\x4', '\x2', 'M', 'O', '\x5', '\f', '\a', '\x2', 'N', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 
		'\x2', '\x2', '\x3', 'U', '\x3', '\x3', '\x2', '\x2', '\x2', 'V', '[', 
		'\a', 'X', '\x2', '\x2', 'W', 'X', '\a', '\f', '\x2', '\x2', 'X', 'Z', 
		'\a', 'X', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '[', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\\', '\x5', '\x3', '\x2', '\x2', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x5', '\b', '\x5', 
		'\x2', '_', '\x61', '\x5', '\n', '\x6', '\x2', '`', '^', '\x3', '\x2', 
		'\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\a', 'Y', '\x2', '\x2', '\x65', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\a', '\x3', '\x2', '\x2', 'g', 'l', '\x5', 
		'\x4', '\x3', '\x2', 'h', 'i', '\a', 'U', '\x2', '\x2', 'i', 'k', '\x5', 
		'\x4', '\x3', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'm', '\t', '\x3', '\x2', '\x2', '\x2', 'n', 'l', 
		'\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x4', '\x2', '\x2', 'p', 
		'q', '\a', 'X', '\x2', '\x2', 'q', 'r', '\a', 'Q', '\x2', '\x2', 'r', 
		'\v', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', '\xE', '\b', '\x2', 
		't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\a', 'Y', '\x2', '\x2', 
		'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '~', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x5', '\x10', '\t', '\x2', 
		'|', '~', '\x5', '\x12', '\n', '\x2', '}', 't', '\x3', '\x2', '\x2', '\x2', 
		'}', '{', '\x3', '\x2', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '\r', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x92', '\x5', '\x18', 
		'\r', '\x2', '\x80', '\x92', '\x5', '\x1A', '\xE', '\x2', '\x81', '\x92', 
		'\x5', '\"', '\x12', '\x2', '\x82', '\x92', '\x5', '.', '\x18', '\x2', 
		'\x83', '\x92', '\x5', '&', '\x14', '\x2', '\x84', '\x92', '\x5', '\x16', 
		'\f', '\x2', '\x85', '\x92', '\x5', '\x30', '\x19', '\x2', '\x86', '\x92', 
		'\x5', '\x34', '\x1B', '\x2', '\x87', '\x92', '\x5', '\x32', '\x1A', '\x2', 
		'\x88', '\x92', '\x5', '\x36', '\x1C', '\x2', '\x89', '\x92', '\x5', '\x38', 
		'\x1D', '\x2', '\x8A', '\x92', '\x5', ':', '\x1E', '\x2', '\x8B', '\x92', 
		'\x5', '<', '\x1F', '\x2', '\x8C', '\x92', '\x5', '>', ' ', '\x2', '\x8D', 
		'\x92', '\x5', '@', '!', '\x2', '\x8E', '\x92', '\x5', 'J', '&', '\x2', 
		'\x8F', '\x92', '\x5', '$', '\x13', '\x2', '\x90', '\x92', '\x5', '\x42', 
		'\"', '\x2', '\x91', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x82', '\x3', '\x2', '\x2', '\x2', '\x91', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x84', '\x3', '\x2', '\x2', '\x2', '\x91', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x87', '\x3', '\x2', '\x2', '\x2', '\x91', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x89', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\xF', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x5', 
		'\x2', '\x2', '\x94', '\x96', '\a', 'X', '\x2', '\x2', '\x95', '\x97', 
		'\x5', '\x14', '\v', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x5', '\x18', '\r', '\x2', '\x99', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x6', '\x2', '\x2', 
		'\x9B', '\x9C', '\a', 'X', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x18', 
		'\r', '\x2', '\x9D', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\a', '\x44', '\x2', '\x2', '\x9F', '\xA4', '\x5', '\x4', '\x3', '\x2', 
		'\xA0', '\xA1', '\a', 'U', '\x2', '\x2', '\xA1', '\xA3', '\x5', '\x4', 
		'\x3', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', 
		'\a', '\x45', '\x2', '\x2', '\xA8', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\x5', '\x4', '\x3', '\x2', '\xAA', '\xAB', '\x5', '\x1A', 
		'\xE', '\x2', '\xAB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xB0', 
		'\a', '\x46', '\x2', '\x2', '\xAD', '\xAF', '\x5', '\f', '\a', '\x2', 
		'\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', 'G', 
		'\x2', '\x2', '\xB4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', 
		'\a', '\x44', '\x2', '\x2', '\xB6', '\xB9', '\x5', '\xE', '\b', '\x2', 
		'\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x45', '\x2', '\x2', 
		'\xBB', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xC5', '\a', '\x44', 
		'\x2', '\x2', '\xBD', '\xC2', '\x5', '&', '\x14', '\x2', '\xBE', '\xBF', 
		'\a', 'U', '\x2', '\x2', '\xBF', '\xC1', '\x5', '&', '\x14', '\x2', '\xC0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x45', '\x2', '\x2', '\xC8', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCB', '\a', '\x44', '\x2', 
		'\x2', '\xCA', '\xCC', '\x5', '&', '\x14', '\x2', '\xCB', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\a', 'Y', '\x2', 
		'\x2', '\xCE', '\xD0', '\x5', '\xE', '\b', '\x2', '\xCF', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD3', '\a', 'Y', '\x2', 
		'\x2', '\xD2', '\xD4', '\x5', '\xE', '\b', '\x2', '\xD3', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x45', '\x2', 
		'\x2', '\xD6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', 
		'\x44', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\xE', '\b', '\x2', '\xD9', 
		'\xDA', '\a', '\x45', '\x2', '\x2', '\xDA', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\a', '\x42', '\x2', '\x2', '\xDC', '\xDD', '\x5', 
		'\xE', '\b', '\x2', '\xDD', '\xDE', '\a', '\x43', '\x2', '\x2', '\xDE', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '>', '\x2', '\x2', 
		'\xE0', '\xE1', '\a', 'X', '\x2', '\x2', '\xE1', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE4', '\a', '\a', '\x2', '\x2', '\xE3', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', 'X', '\x2', 
		'\x2', '\xE6', '\xE8', '\a', 'X', '\x2', '\x2', '\xE7', '\xE9', '\x5', 
		'(', '\x15', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEB', '\a', '\x18', '\x2', '\x2', '\xEB', '\xED', '\x5', 
		'\xE', '\b', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF3', '\a', '\x46', '\x2', '\x2', '\xEF', '\xF2', '\x5', 
		',', '\x17', '\x2', '\xF0', '\xF2', '\x5', '*', '\x16', '\x2', '\xF1', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\a', 'G', '\x2', '\x2', '\xF7', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF9', '\a', '\xF', '\x2', '\x2', '\xF9', '\xFF', 
		'\a', '\x46', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\xE', '\b', '\x2', 
		'\xFB', '\xFC', '\a', 'Y', '\x2', '\x2', '\xFC', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', 
		'\a', 'P', '\x2', '\x2', '\x103', '\x105', '\x5', '\xE', '\b', '\x2', 
		'\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\a', 'Y', '\x2', '\x2', '\x107', '\x108', '\a', 'G', '\x2', 
		'\x2', '\x108', '+', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'\x10', '\x2', '\x2', '\x10A', '\x10B', '\a', '\x46', '\x2', '\x2', '\x10B', 
		'\x10C', '\a', 'K', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x18', '\x2', 
		'\x2', '\x10D', '\x10E', '\x5', '\xE', '\b', '\x2', '\x10E', '\x10F', 
		'\a', 'Y', '\x2', '\x2', '\x10F', '\x110', '\a', 'G', '\x2', '\x2', '\x110', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x111', '\x113', '\a', '\a', '\x2', 
		'\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\a', 'X', '\x2', '\x2', '\x115', '\x116', '\a', 'X', 
		'\x2', '\x2', '\x116', '\x117', '\x5', '\x1C', '\xF', '\x2', '\x117', 
		'\x118', '\x5', '\x18', '\r', '\x2', '\x118', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11C', '\a', '\x38', '\x2', '\x2', '\x11A', '\x11D', 
		'\x5', '\x1A', '\xE', '\x2', '\x11B', '\x11D', '\x5', '\xE', '\b', '\x2', 
		'\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x121', '\x5', '\x18', '\r', '\x2', '\x11F', '\x121', '\x5', '\xE', '\b', 
		'\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x123', '\a', '<', '\x2', '\x2', '\x123', '\x126', '\x5', ' ', 
		'\x11', '\x2', '\x124', '\x127', '\x5', '\x18', '\r', '\x2', '\x125', 
		'\x127', '\x5', '\xE', '\b', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\a', '=', '\x2', '\x2', 
		'\x129', '\x12C', '\x5', '\x1E', '\x10', '\x2', '\x12A', '\x12D', '\x5', 
		'\x18', '\r', '\x2', '\x12B', '\x12D', '\x5', '\xE', '\b', '\x2', '\x12C', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x35', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', 
		'\x5', '\x4', '\x3', '\x2', '\x12F', '\x130', '\a', '\x18', '\x2', '\x2', 
		'\x130', '\x131', '\x5', '\xE', '\b', '\x2', '\x131', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x132', '\x135', '\x5', '\x44', '#', '\x2', '\x133', '\x135', 
		'\x5', '\x46', '$', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x5', '\x42', '\"', '\x2', '\x137', 
		'\x138', '\t', '\x2', '\x2', '\x2', '\x138', '\x139', '\x5', '\x42', '\"', 
		'\x2', '\x139', ';', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x5', 
		'\x42', '\"', '\x2', '\x13B', '\x13C', '\a', '\x11', '\x2', '\x2', '\x13C', 
		'\x13D', '\x5', '\x42', '\"', '\x2', '\x13D', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x5', '\x42', '\"', '\x2', '\x13F', '\x140', 
		'\a', ')', '\x2', '\x2', '\x140', '\x141', '\x5', '\x42', '\"', '\x2', 
		'\x141', '?', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\a', '(', 
		'\x2', '\x2', '\x143', '\x144', '\x5', '\x42', '\"', '\x2', '\x144', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x147', '\a', '\x19', '\x2', '\x2', 
		'\x146', '\x145', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x14E', '\x5', '\x4', '\x3', '\x2', '\x149', '\x14E', '\x5', 'H', '%', 
		'\x2', '\x14A', '\x14E', '\a', 'Q', '\x2', '\x2', '\x14B', '\x14E', '\a', 
		'K', '\x2', '\x2', '\x14C', '\x14E', '\x5', '\x1A', '\xE', '\x2', '\x14D', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x43', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '\x17', 
		'\x2', '\x2', '\x150', '\x151', '\x5', '\x4', '\x3', '\x2', '\x151', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x5', '\x4', '\x3', '\x2', 
		'\x153', '\x154', '\a', '\x17', '\x2', '\x2', '\x154', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x156', '\a', 'J', '\x2', '\x2', '\x156', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', '\x39', '\x2', '\x2', 
		'\x158', 'K', '\x3', '\x2', '\x2', '\x2', '$', 'N', 'R', '[', '`', '\x62', 
		'l', 'v', 'y', '}', '\x91', '\x96', '\xA4', '\xB0', '\xB8', '\xC2', '\xC5', 
		'\xCB', '\xCF', '\xD3', '\xE3', '\xE8', '\xEC', '\xF1', '\xF3', '\xFF', 
		'\x104', '\x112', '\x11C', '\x120', '\x126', '\x12C', '\x134', '\x146', 
		'\x14D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
